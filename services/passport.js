const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// model class
const User = mongoose.model('users');

// user == whatever was pulled from the db. null == there was no error
// user.id is not the profile.id but the one automatically generated by mongo
// user.id is stuffed into cookie (user.id)
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// get whatever is within the cookie: turn id into mongoose model instance
// search users and call done for the user we're looking for
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      // route where user will be sent after they gran permission to app:
      callbackURL: '/auth/google/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleId: profile.id }).then(existingUser => {
        if (existingUser) {
          // we've got a record with this google id. Call done and pass null (no error) and the user record
          done(null, existingUser);
        } else {
          // no user record. Create a new one.
          new User({
            googleId: profile.id
          })
            .save()
            // In this case we don't call done until we know for a fact that the user has been successfully saved to the db
            // user = user that was just saved (new User instance)
            .then(user => done(null, user));
        }
      });
    }
  )
);

passport.use(
  new FacebookStrategy(
    {
      clientID: keys.facebookClientID,
      clientSecret: keys.facebookClientSecret,
      callbackURL: '/auth/facebook/callback',
      enableProof: true
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ facebookId: profile.id }).then(existingUser => {
        if (existingUser) {
          done(null, existingUser);
        } else {
          new User({
            facebookId: profile.id
          })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);
